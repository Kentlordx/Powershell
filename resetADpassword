#####################################  
 ## Kent Høgseth
 ## Password reset
 ## Creates AD password and sends sms to mobilenumber in AD
 ##    
 ##   
 ##  
 #####################################
Begin {  
   Clear-Host  
   #Check for Active Directory module  
   if (-not (Import-Module activedirectory)) {  
     Import-Module activedirectory  
   }  

     
   #Generate Random Password  
   function Generate-Password {  
     param(
    [ValidateRange(6,30)]
    [int]$length = 12,
    [switch]$uppercase,
    [switch]$lowercase,
    [switch]$numbers,
    [switch]$special,
    [string[]]$excludedchars
)

IF (!$uppercase -and !$lowercase -and !$numbers -and !$special) {write-warning "Please specify characters to use";break}

$upperID   = 65..90
$lowerID   = 97..122
$numberID  = 48..57
$specialID = 33..47+58..64+91..96+123..126

IF ($uppercase) {$range += $upperID}
IF ($lowercase) {$range += $lowerID}
IF ($numbers) {$range += $numberID}
IF ($special) {$range += $specialID}

$allowedchar = @()

foreach ($i in $range) {
    
    IF ([char]$i -notin $excludedchars) {$allowedchar += [char]$i}

}

$BadPass = "I don't want to be bad"

while ($BadPass) {
    
    if ($BadPass) {Clear-Variable badpass}
    if ($RandomPassword) {Clear-Variable RandomPassword}

    for ($i = 1; $i –le $length; $i++) {

        $randomIndex = Get-Random -Maximum $allowedchar.count

        $RandomPassword += $allowedchar[$randomIndex]

    }

    IF ($lowercase) {IF ($RandomPassword -cnotmatch "[a-z]") {$BadPass++}}
    IF ($uppercase) {IF ($RandomPassword -cnotmatch "[A-Z]") {$BadPass++}}
    IF ($numbers)   {IF ($RandomPassword -notmatch "[0-9]") {$BadPass++}}
    IF ($special)   {IF ($RandomPassword -cnotmatch '[^a-zA-Z0-9]') {$BadPass++}}

}

Return $RandomPassword

}

$password1 = (Generate-Password -length 12 -uppercase -lowercase -numbers -special -excludedchars  "#","%","&","'","(",")","*","+",",",".","/",":",";","<","=",">","?","@","[","#","\","]","^","_","{","|","}","~","$","€","£","``","`"")
     

      
   #Get AD user account and validate it  
   do {   
     $SamAccountName = Read-Host "`nReset Password For AD Account"  
   
     if ($SamAccountName -eq "") {  
       Clear-Host  
       Write-Host -Object "`nPlease type AccountName`n" -BackgroundColor Red  
       continue  
     }  
     elseif ($(Get-ADUser -LDAPFilter "(sAMAccountName=$SamAccountName)").SamAccountName -eq $SamAccountName) {  
       $AccountToReset = Get-ADUser -LDAPFilter "(sAMAccountName=$SamAccountName)"  
         
       break  
     }  
     else {  
       Clear-Host  
       Write-Host -Object "`nTyped Account Name doesn't exists, Please try again`n" -BackgroundColor Red  
       $Everything_is_fine = $false   
     }  
   }  
   while ($SamAccountName -eq "" -or $Everything_is_fine -eq $false)  
   
     
   Write-Host "`nAccount has been verified and it exists`n" -ForegroundColor Green  
     
  
  $mobile = Get-ADUser $SamAccountName -Properties mobile

  $fullname = $mobile.Name

  $phonenumber = $mobile.mobile -replace '\s',''
  

 }  
 
Process {    
# prompt for Passwordreset. AKA the Anders Slettjord option
$title    = "Reset password for $fullname"
$question = 'Are you sure you want to reset the password?'
$choices  = '&Yes', '&No'

        $decision = $Host.UI.PromptForChoice($title, $question, $choices, 1)
        if ($decision -eq 0) {
        Write-Host 'confirmed'
         
   #Reset password and unlock it  
   $PlainText = $password1 
   $Password = ConvertTo-SecureString -AsPlainText $PlainText -Force  
   $AccountToReset | Set-ADAccountPassword -Reset -NewPassword $Password  
   $AccountToReset | Unlock-ADAccount  
   $AccountToReset | Set-ADUser -ChangePasswordAtLogon:$True  
   Write-Warning "Password reset and unlocked"  
   
   #Send SMS
    $scriptpath = $PSScriptRoot  
    $smsscriptpath = "$scriptpath\Sendsingle.ps1"
    $arguments = "-Phonenumber $phonenumber -Message '$PlainText'"

    Set-Location -path $scriptpath
    Invoke-Expression "$smsscriptpath $arguments"
     $usedaction = "New password is $PlainText"
 }  
  
else {
    Write-Host 'cancelled'
    $usedaction = 'Pyse'
}
}
End {  
   Write-Host "$usedaction"  -ForegroundColor Green
   Pause  
 }
